name: prebuild-win
on:
  push: { tags: ['v*'] }
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
      - uses: actions/checkout@v4

      # Nodeは18に固定（N-API prebuildはNode20/22でも動作）
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          check-latest: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 誤ディレクトリ実行の早期検出
      - name: Ensure binding.gyp exists
        shell: pwsh
        run: |
          if (!(Test-Path "binding.gyp")) {
            Write-Error "binding.gyp not found at repo root"
            exit 1
          }

      # 念のためクリーン（前回失敗の残骸でEPERMになることを避ける）
      - name: Clean node_modules (best-effort)
        shell: pwsh
        run: |
          if (Test-Path "node_modules") {
            try { Remove-Item -Recurse -Force "node_modules" -ErrorAction Stop } catch {}
          }

      # lockfile があれば ci を試す → 不整合なら install に自動フォールバック
      # dev依存（prebuildify/node-gyp-build等）は省かない
      - name: Install deps (ci with fallback)
        shell: pwsh
        run: |
          if (Test-Path "package-lock.json") {
            npm ci
            if ($LASTEXITCODE -ne 0) {
              Write-Host "Lockfile out of sync → running npm install to refresh"
              npm install --no-fund --no-audit
            }
          } else {
            npm install --no-fund --no-audit
          }

      # Windowsでは npx より npm script 経由が安定
      # package.json に "prebuild": "prebuildify --napi" が無い場合は自動フォールバック
      - name: Build N-API prebuilds
        shell: pwsh
        run: |
          node -e "const p=require('./package.json'); process.exit(p.scripts && p.scripts.prebuild ? 0 : 1)"
          if ($LASTEXITCODE -eq 0) {
            npm run prebuild
          } else {
            npx --yes prebuildify --napi
          }

      - name: Smoke test
        shell: pwsh
        run: node -e "require('node-gyp-build')(__dirname); console.log('ok', process.platform, process.arch)"

      - name: Pack (zip)
        shell: pwsh
        run: |
          if (!(Test-Path prebuilds)) { Write-Error 'prebuilds folder not found'; exit 1 }
          Compress-Archive -Path prebuilds -DestinationPath prebuilds-win32-x64.zip -Force

      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-win32-x64
          path: prebuilds-win32-x64.zip
