name: prebuild-win
on:
  push: { tags: ['v*'] }
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
      - uses: actions/checkout@v4

      # Nodeは18に固定（N-API prebuildはNode20/22でも動作）
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          check-latest: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 失敗の残骸でEPERMになるのを避けるため軽く掃除
      - name: Clean node_modules (best-effort)
        shell: pwsh
        run: |
          if (Test-Path "node_modules") {
            try { Remove-Item -Recurse -Force "node_modules" -ErrorAction Stop } catch {}
          }

      # lockfile 不整合で落ちないよう npm install に固定（devは省く）
      - name: Install runtime deps
        shell: pwsh
        run: npm install --omit=dev --no-fund --no-audit

      # prebuild を実行するディレクトリを自動判定
      - name: Detect addon directory
        id: paths
        shell: pwsh
        run: |
          if (Test-Path "binding.gyp") {
            "dir=." >> $env:GITHUB_OUTPUT
          } elseif (Test-Path "node_modules\\naudiodon\\binding.gyp") {
            "dir=node_modules\\naudiodon" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "binding.gyp not found (repo root nor node_modules\\naudiodon)"
            exit 1
          }

      - name: Show addon dir
        shell: pwsh
        run: echo "AddonDir=${{ steps.paths.outputs.dir }}"

      # prebuildify を「binding.gyp のある場所」で実行
      - name: Build N-API prebuilds
        shell: pwsh
        working-directory: ${{ steps.paths.outputs.dir }}
        run: npx --yes prebuildify --napi

      # 生成確認（.node の存在チェック）
      - name: Verify output
        shell: pwsh
        working-directory: ${{ steps.paths.outputs.dir }}
        run: |
          if (!(Test-Path "prebuilds")) { Write-Error "prebuilds folder not found"; exit 1 }
          Get-ChildItem -Recurse prebuilds | Write-Host

      # Windowsはzipで固める
      - name: Pack (zip)
        shell: pwsh
        working-directory: ${{ steps.paths.outputs.dir }}
        run: Compress-Archive -Path prebuilds -DestinationPath prebuilds-win32-x64.zip -Force

      - uses: actions/upload-artifact@v4
        with:
          name: prebuilds-win32-x64
          path: ${{ steps.paths.outputs.dir }}\prebuilds-win32-x64.zip
